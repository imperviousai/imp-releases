// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/imp/api/federate/federate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct RequestFederateRequest {
    // message fields
    pub pubkey: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestFederateRequest {
    fn default() -> &'a RequestFederateRequest {
        <RequestFederateRequest as ::protobuf::Message>::default_instance()
    }
}

impl RequestFederateRequest {
    pub fn new() -> RequestFederateRequest {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestFederateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestFederateRequest {
        RequestFederateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &RequestFederateRequest| { &m.pubkey },
                |m: &mut RequestFederateRequest| { &mut m.pubkey },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestFederateRequest>(
                "RequestFederateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestFederateRequest {
        static instance: ::protobuf::rt::LazyV2<RequestFederateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestFederateRequest::new)
    }
}

impl ::protobuf::Clear for RequestFederateRequest {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestFederateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestFederateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestFederateResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestFederateResponse {
    fn default() -> &'a RequestFederateResponse {
        <RequestFederateResponse as ::protobuf::Message>::default_instance()
    }
}

impl RequestFederateResponse {
    pub fn new() -> RequestFederateResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestFederateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestFederateResponse {
        RequestFederateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &RequestFederateResponse| { &m.id },
                |m: &mut RequestFederateResponse| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestFederateResponse>(
                "RequestFederateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestFederateResponse {
        static instance: ::protobuf::rt::LazyV2<RequestFederateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestFederateResponse::new)
    }
}

impl ::protobuf::Clear for RequestFederateResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestFederateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestFederateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LeaveFederationRequest {
    // message fields
    pub pubkey: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LeaveFederationRequest {
    fn default() -> &'a LeaveFederationRequest {
        <LeaveFederationRequest as ::protobuf::Message>::default_instance()
    }
}

impl LeaveFederationRequest {
    pub fn new() -> LeaveFederationRequest {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LeaveFederationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LeaveFederationRequest {
        LeaveFederationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &LeaveFederationRequest| { &m.pubkey },
                |m: &mut LeaveFederationRequest| { &mut m.pubkey },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LeaveFederationRequest>(
                "LeaveFederationRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LeaveFederationRequest {
        static instance: ::protobuf::rt::LazyV2<LeaveFederationRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LeaveFederationRequest::new)
    }
}

impl ::protobuf::Clear for LeaveFederationRequest {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LeaveFederationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaveFederationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LeaveFederationResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LeaveFederationResponse {
    fn default() -> &'a LeaveFederationResponse {
        <LeaveFederationResponse as ::protobuf::Message>::default_instance()
    }
}

impl LeaveFederationResponse {
    pub fn new() -> LeaveFederationResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LeaveFederationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LeaveFederationResponse {
        LeaveFederationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &LeaveFederationResponse| { &m.id },
                |m: &mut LeaveFederationResponse| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LeaveFederationResponse>(
                "LeaveFederationResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LeaveFederationResponse {
        static instance: ::protobuf::rt::LazyV2<LeaveFederationResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LeaveFederationResponse::new)
    }
}

impl ::protobuf::Clear for LeaveFederationResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LeaveFederationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaveFederationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%proto/imp/api/federate/federate.proto\x12\x08federate\x1a\x1cgoogle/a\
    pi/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \"0\n\x16RequestFederateRequest\x12\x16\n\x06pubkey\x18\x01\x20\x01(\tR\
    \x06pubkey\")\n\x17RequestFederateResponse\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\"0\n\x16LeaveFederationRequest\x12\x16\n\x06pubkey\x18\
    \x01\x20\x01(\tR\x06pubkey\")\n\x17LeaveFederationResponse\x12\x0e\n\x02\
    id\x18\x01\x20\x01(\tR\x02id2\xfa\x01\n\x08Federate\x12w\n\x0fRequestFed\
    erate\x12\x20.federate.RequestFederateRequest\x1a!.federate.RequestFeder\
    ateResponse\"\x1f\x82\xd3\xe4\x93\x02\x19\"\x14/v1/federate/request:\x01\
    *\x12u\n\x0fLeaveFederation\x12\x20.federate.LeaveFederationRequest\x1a!\
    .federate.LeaveFederationResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\"\x12/v1\
    /federate/leave:\x01*B\xc8\x01Z#github.com/imperviousai/freeimp/gen\x92A\
    \x9f\x01\x12@\n\x11Federate\x20Services\"&\n\rImpervious\x20AI\x12\x15ht\
    tps://impervious.ai2\x031.0*\x03\x01\x02\x042\x10application/json:\x10ap\
    plication/jsonr2\n\x14Documentation\x20on\x20IMP\x12\x1ahttps://docs.imp\
    ervious.aiJ\x9b\n\n\x06\x12\x04\x01\0R\x01\n?\n\x01\x0c\x12\x03\x01\0\
    \x12\x1a5/\x20Allows\x20for\x20p2p\x20federation\x20between\x20Imperviou\
    s\x20nodes\n\n\x08\n\x01\x02\x12\x03\x03\0\x11\n\x08\n\x01\x08\x12\x03\
    \x05\0:\n\t\n\x02\x08\x0b\x12\x03\x05\0:\n\t\n\x02\x03\0\x12\x03\x07\0&\
    \n\t\n\x02\x03\x01\x12\x03\x08\08\n\t\n\x01\x08\x12\x04\n\0\x1c\x02\n\
    \x0b\n\x03\x08\x92\x08\x12\x04\n\0\x1c\x02\nT\n\x02\x06\0\x12\x04\"\06\
    \x01\x1aH*\n\x20Federate\x20service\x20allows\x20for\x20P2P\x20federatio\
    n\x20between\x20Impervious\x20nodes.\n\n\n\n\x03\x06\0\x01\x12\x03\"\x08\
    \x10\nW\n\x04\x06\0\x02\0\x12\x04&\x08+\t\x1aI*\n\x20RequestFederation\
    \x20performs\x20the\x20federation\x20request\x20to\x20a\x20specific\x20p\
    eer.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03&\x0c\x1b\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03&\x1c2\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03&=T\n\r\n\
    \x05\x06\0\x02\0\x04\x12\x04'\x10*\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x04'\x10*\x12\nb\n\x04\x06\0\x02\x01\x12\x040\x085\t\x1aT*\n\
    \x20LeaveFederation\x20performs\x20the\x20removal\x20of\x20a\x20federate\
    d\x20peer\x20(upon\x20message\x20receipt).\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x030\x0c\x1b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x030\x1c2\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x030=T\n\r\n\x05\x06\0\x02\x01\x04\x12\x041\
    \x104\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x041\x104\x12\nD\
    \n\x02\x04\0\x12\x04;\0=\x01\x1a8*\n\x20Represents\x20a\x20request\x20to\
    \x20federate\x20with\x20a\x20far\x20end\x20node\n\n\n\n\x03\x04\0\x01\
    \x12\x03;\x08\x1e\nA\n\x04\x04\0\x02\0\x12\x03<\x08\x1a\"4\x20The\x20pub\
    lic\x20key\x20of\x20the\x20far\x20end\x20LND\x20node\x20running\x20IMP\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03<\x08\x0e\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03<\x0f\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03<\x18\x19\nD\n\
    \x02\x04\x01\x12\x04B\0D\x01\x1a8*\n\x20Represents\x20a\x20response\x20b\
    ack\x20from\x20a\x20Federation\x20Request\n\n\n\n\x03\x04\x01\x01\x12\
    \x03B\x08\x1f\n\"\n\x04\x04\x01\x02\0\x12\x03C\x08\x16\"\x15\x20returned\
    \x20message\x20ID\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03C\x08\x0e\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03C\x0f\x11\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03C\x14\x15\nN\n\x02\x04\x02\x12\x04I\0K\x01\x1aB*\n\x20Represents\
    \x20a\x20request\x20to\x20leave\x20a\x20federation\x20from\x20a\x20far\
    \x20end\x20node\n\n\n\n\x03\x04\x02\x01\x12\x03I\x08\x1e\nA\n\x04\x04\
    \x02\x02\0\x12\x03J\x08\x1a\"4\x20The\x20public\x20key\x20of\x20the\x20f\
    ar\x20end\x20LND\x20node\x20running\x20IMP\n\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03J\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03J\x0f\x15\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03J\x18\x19\nJ\n\x02\x04\x03\x12\x04P\
    \0R\x01\x1a>*\n\x20Represents\x20a\x20response\x20back\x20from\x20a\x20L\
    eave\x20Federation\x20Request\n\n\n\n\x03\x04\x03\x01\x12\x03P\x08\x1f\n\
    \"\n\x04\x04\x03\x02\0\x12\x03Q\x08\x16\"\x15\x20returned\x20message\x20\
    ID\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03Q\x08\x0e\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03Q\x0f\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03Q\x14\
    \x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
