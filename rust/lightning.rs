// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/imp/api/lightning/lightning.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct GenerateInvoiceRequest {
    // message fields
    pub amount: i64,
    pub memo: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateInvoiceRequest {
    fn default() -> &'a GenerateInvoiceRequest {
        <GenerateInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GenerateInvoiceRequest {
    pub fn new() -> GenerateInvoiceRequest {
        ::std::default::Default::default()
    }

    // int64 amount = 1;


    pub fn get_amount(&self) -> i64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = v;
    }

    // string memo = 2;


    pub fn get_memo(&self) -> &str {
        &self.memo
    }
    pub fn clear_memo(&mut self) {
        self.memo.clear();
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        &mut self.memo
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.memo, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GenerateInvoiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.amount = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.memo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.memo);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0 {
            os.write_int64(1, self.amount)?;
        }
        if !self.memo.is_empty() {
            os.write_string(2, &self.memo)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateInvoiceRequest {
        GenerateInvoiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "amount",
                |m: &GenerateInvoiceRequest| { &m.amount },
                |m: &mut GenerateInvoiceRequest| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "memo",
                |m: &GenerateInvoiceRequest| { &m.memo },
                |m: &mut GenerateInvoiceRequest| { &mut m.memo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenerateInvoiceRequest>(
                "GenerateInvoiceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenerateInvoiceRequest {
        static instance: ::protobuf::rt::LazyV2<GenerateInvoiceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenerateInvoiceRequest::new)
    }
}

impl ::protobuf::Clear for GenerateInvoiceRequest {
    fn clear(&mut self) {
        self.amount = 0;
        self.memo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateInvoiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenerateInvoiceResponse {
    // message fields
    pub invoice: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateInvoiceResponse {
    fn default() -> &'a GenerateInvoiceResponse {
        <GenerateInvoiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GenerateInvoiceResponse {
    pub fn new() -> GenerateInvoiceResponse {
        ::std::default::Default::default()
    }

    // string invoice = 1;


    pub fn get_invoice(&self) -> &str {
        &self.invoice
    }
    pub fn clear_invoice(&mut self) {
        self.invoice.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice(&mut self, v: ::std::string::String) {
        self.invoice = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice(&mut self) -> &mut ::std::string::String {
        &mut self.invoice
    }

    // Take field
    pub fn take_invoice(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoice, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GenerateInvoiceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.invoice.is_empty() {
            os.write_string(1, &self.invoice)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateInvoiceResponse {
        GenerateInvoiceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "invoice",
                |m: &GenerateInvoiceResponse| { &m.invoice },
                |m: &mut GenerateInvoiceResponse| { &mut m.invoice },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenerateInvoiceResponse>(
                "GenerateInvoiceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenerateInvoiceResponse {
        static instance: ::protobuf::rt::LazyV2<GenerateInvoiceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenerateInvoiceResponse::new)
    }
}

impl ::protobuf::Clear for GenerateInvoiceResponse {
    fn clear(&mut self) {
        self.invoice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateInvoiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateInvoiceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PayInvoiceRequest {
    // message fields
    pub invoice: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayInvoiceRequest {
    fn default() -> &'a PayInvoiceRequest {
        <PayInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PayInvoiceRequest {
    pub fn new() -> PayInvoiceRequest {
        ::std::default::Default::default()
    }

    // string invoice = 1;


    pub fn get_invoice(&self) -> &str {
        &self.invoice
    }
    pub fn clear_invoice(&mut self) {
        self.invoice.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice(&mut self, v: ::std::string::String) {
        self.invoice = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice(&mut self) -> &mut ::std::string::String {
        &mut self.invoice
    }

    // Take field
    pub fn take_invoice(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoice, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PayInvoiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.invoice.is_empty() {
            os.write_string(1, &self.invoice)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PayInvoiceRequest {
        PayInvoiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "invoice",
                |m: &PayInvoiceRequest| { &m.invoice },
                |m: &mut PayInvoiceRequest| { &mut m.invoice },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PayInvoiceRequest>(
                "PayInvoiceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PayInvoiceRequest {
        static instance: ::protobuf::rt::LazyV2<PayInvoiceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PayInvoiceRequest::new)
    }
}

impl ::protobuf::Clear for PayInvoiceRequest {
    fn clear(&mut self) {
        self.invoice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayInvoiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PayInvoiceResponse {
    // message fields
    pub preimage: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PayInvoiceResponse {
    fn default() -> &'a PayInvoiceResponse {
        <PayInvoiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl PayInvoiceResponse {
    pub fn new() -> PayInvoiceResponse {
        ::std::default::Default::default()
    }

    // string preimage = 1;


    pub fn get_preimage(&self) -> &str {
        &self.preimage
    }
    pub fn clear_preimage(&mut self) {
        self.preimage.clear();
    }

    // Param is passed by value, moved
    pub fn set_preimage(&mut self, v: ::std::string::String) {
        self.preimage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preimage(&mut self) -> &mut ::std::string::String {
        &mut self.preimage
    }

    // Take field
    pub fn take_preimage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.preimage, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PayInvoiceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.preimage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.preimage.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.preimage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.preimage.is_empty() {
            os.write_string(1, &self.preimage)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PayInvoiceResponse {
        PayInvoiceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "preimage",
                |m: &PayInvoiceResponse| { &m.preimage },
                |m: &mut PayInvoiceResponse| { &mut m.preimage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PayInvoiceResponse>(
                "PayInvoiceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PayInvoiceResponse {
        static instance: ::protobuf::rt::LazyV2<PayInvoiceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PayInvoiceResponse::new)
    }
}

impl ::protobuf::Clear for PayInvoiceResponse {
    fn clear(&mut self) {
        self.preimage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayInvoiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayInvoiceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckInvoiceRequest {
    // message fields
    pub invoice: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckInvoiceRequest {
    fn default() -> &'a CheckInvoiceRequest {
        <CheckInvoiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckInvoiceRequest {
    pub fn new() -> CheckInvoiceRequest {
        ::std::default::Default::default()
    }

    // string invoice = 1;


    pub fn get_invoice(&self) -> &str {
        &self.invoice
    }
    pub fn clear_invoice(&mut self) {
        self.invoice.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoice(&mut self, v: ::std::string::String) {
        self.invoice = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoice(&mut self) -> &mut ::std::string::String {
        &mut self.invoice
    }

    // Take field
    pub fn take_invoice(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoice, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CheckInvoiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.invoice.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.invoice);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.invoice.is_empty() {
            os.write_string(1, &self.invoice)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckInvoiceRequest {
        CheckInvoiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "invoice",
                |m: &CheckInvoiceRequest| { &m.invoice },
                |m: &mut CheckInvoiceRequest| { &mut m.invoice },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckInvoiceRequest>(
                "CheckInvoiceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckInvoiceRequest {
        static instance: ::protobuf::rt::LazyV2<CheckInvoiceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckInvoiceRequest::new)
    }
}

impl ::protobuf::Clear for CheckInvoiceRequest {
    fn clear(&mut self) {
        self.invoice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckInvoiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckInvoiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckInvoiceResponse {
    // message fields
    pub paid: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckInvoiceResponse {
    fn default() -> &'a CheckInvoiceResponse {
        <CheckInvoiceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckInvoiceResponse {
    pub fn new() -> CheckInvoiceResponse {
        ::std::default::Default::default()
    }

    // bool paid = 1;


    pub fn get_paid(&self) -> bool {
        self.paid
    }
    pub fn clear_paid(&mut self) {
        self.paid = false;
    }

    // Param is passed by value, moved
    pub fn set_paid(&mut self, v: bool) {
        self.paid = v;
    }
}

impl ::protobuf::Message for CheckInvoiceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.paid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.paid != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.paid != false {
            os.write_bool(1, self.paid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckInvoiceResponse {
        CheckInvoiceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "paid",
                |m: &CheckInvoiceResponse| { &m.paid },
                |m: &mut CheckInvoiceResponse| { &mut m.paid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckInvoiceResponse>(
                "CheckInvoiceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckInvoiceResponse {
        static instance: ::protobuf::rt::LazyV2<CheckInvoiceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckInvoiceResponse::new)
    }
}

impl ::protobuf::Clear for CheckInvoiceResponse {
    fn clear(&mut self) {
        self.paid = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckInvoiceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckInvoiceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'proto/imp/api/lightning/lightning.proto\x12\tlightning\x1a\x1cgoogle/\
    api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\
    \"D\n\x16GenerateInvoiceRequest\x12\x16\n\x06amount\x18\x01\x20\x01(\x03\
    R\x06amount\x12\x12\n\x04memo\x18\x02\x20\x01(\tR\x04memo\"3\n\x17Genera\
    teInvoiceResponse\x12\x18\n\x07invoice\x18\x01\x20\x01(\tR\x07invoice\"-\
    \n\x11PayInvoiceRequest\x12\x18\n\x07invoice\x18\x01\x20\x01(\tR\x07invo\
    ice\"0\n\x12PayInvoiceResponse\x12\x1a\n\x08preimage\x18\x01\x20\x01(\tR\
    \x08preimage\"/\n\x13CheckInvoiceRequest\x12\x18\n\x07invoice\x18\x01\
    \x20\x01(\tR\x07invoice\"*\n\x14CheckInvoiceResponse\x12\x12\n\x04paid\
    \x18\x01\x20\x01(\x08R\x04paid2\xf8\x02\n\tLightning\x12\x82\x01\n\x0fGe\
    nerateInvoice\x12!.lightning.GenerateInvoiceRequest\x1a\".lightning.Gene\
    rateInvoiceResponse\"(\x82\xd3\xe4\x93\x02\"\"\x1d/v1/lightning/generate\
    invoice:\x01*\x12n\n\nPayInvoice\x12\x1c.lightning.PayInvoiceRequest\x1a\
    \x1d.lightning.PayInvoiceResponse\"#\x82\xd3\xe4\x93\x02\x1d\"\x18/v1/li\
    ghtning/payinvoice:\x01*\x12v\n\x0cCheckInvoice\x12\x1e.lightning.CheckI\
    nvoiceRequest\x1a\x1f.lightning.CheckInvoiceResponse\"%\x82\xd3\xe4\x93\
    \x02\x1f\"\x1a/v1/lightning/checkinvoice:\x01*B\xc9\x01Z#github.com/impe\
    rviousai/freeimp/gen\x92A\xa0\x01\x12A\n\x12Lightning\x20Services\"&\n\r\
    Impervious\x20AI\x12\x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\
    \x10application/json:\x10application/jsonr2\n\x14Documentation\x20on\x20\
    IMP\x12\x1ahttps://docs.impervious.aiJ\xee\x0f\n\x06\x12\x04\x01\0j\x01\
    \n>\n\x01\x0c\x12\x03\x01\0\x12\x1a4/\x20Allows\x20for\x20p2p\x20messagi\
    ng\x20between\x20Impervious\x20nodes\n\n\x08\n\x01\x02\x12\x03\x03\0\x12\
    \n\x08\n\x01\x08\x12\x03\x05\0:\n\t\n\x02\x08\x0b\x12\x03\x05\0:\n\t\n\
    \x02\x03\0\x12\x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\x08\08\n\t\n\x01\x08\
    \x12\x04\n\0\x1c\x02\n\x0b\n\x03\x08\x92\x08\x12\x04\n\0\x1c\x02\nv\n\
    \x02\x06\0\x12\x04!\0?\x01\x1aj*\n\x20Lightning\x20service\x20allows\x20\
    lightning\x20actions\x20on\x20your\x20underlying\x20lightning\x20node\
    \x20from\x20the\x20Impervious\x20node.\n\n\n\n\x03\x06\0\x01\x12\x03!\
    \x08\x11\n{\n\x04\x06\0\x02\0\x12\x04%\x08*\t\x1am*\n\x20GenerateInvoice\
    \x20allows\x20you\x20to\x20generate\x20an\x20invoice\x20for\x20a\x20spec\
    ific\x20payment\x20amount\x20from\x20your\x20lightning\x20node.\n\n\x0c\
    \n\x05\x06\0\x02\0\x01\x12\x03%\x0c\x1b\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03%\x1c2\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03%=T\n\r\n\x05\x06\0\x02\0\
    \x04\x12\x04&\x10)\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04&\
    \x10)\x12\n[\n\x04\x06\0\x02\x01\x12\x04/\x084\t\x1aM*\n\x20PayInvoice\
    \x20allows\x20you\x20to\x20pay\x20a\x20specific\x20invoice\x20with\x20yo\
    ur\x20lightning\x20node.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03/\x0c\
    \x16\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03/\x17(\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03/3E\n\r\n\x05\x06\0\x02\x01\x04\x12\x040\x103\x12\n\x11\
    \n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x040\x103\x12\n\\\n\x04\x06\0\
    \x02\x02\x12\x049\x08>\t\x1aN*\n\x20CheckInvoice\x20allows\x20you\x20to\
    \x20check\x20a\x20specific\x20invoice\x20to\x20see\x20if\x20it\x20was\
    \x20paid.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x039\x0c\x18\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x039\x19,\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x0397\
    K\n\r\n\x05\x06\0\x02\x02\x04\x12\x04:\x10=\x12\n\x11\n\t\x06\0\x02\x02\
    \x04\xb0\xca\xbc\"\x12\x04:\x10=\x12\nP\n\x02\x04\0\x12\x04D\0G\x01\x1aD\
    *\n\x20Represents\x20an\x20invoice\x20creation\x20request\x20from\x20you\
    r\x20lightning\x20node.\n\n\n\n\x03\x04\0\x01\x12\x03D\x08\x1e\n9\n\x04\
    \x04\0\x02\0\x12\x03E\x08\x19\",\x20The\x20amount\x20of\x20satoshis\x20y\
    ou\x20want\x20to\x20receive\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03E\x08\r\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03E\x0e\x14\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03E\x17\x18\nA\n\x04\x04\0\x02\x01\x12\x03F\x08\x18\"4\x20The\
    \x20human\x20readable\x20memo\x20you\x20want\x20the\x20sender\x20to\x20s\
    ee\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03F\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03F\x0f\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03F\x16\
    \x17\nN\n\x02\x04\x01\x12\x04L\0N\x01\x1aB*\n\x20Represents\x20a\x20resp\
    onse\x20back\x20from\x20an\x20invoice\x20generation\x20request.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03L\x08\x1f\n3\n\x04\x04\x01\x02\0\x12\x03M\x08\
    \x1b\"&\x20The\x20invoice\x20from\x20your\x20lightning\x20node\n\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03M\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03M\x0f\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03M\x19\x1a\nO\n\
    \x02\x04\x02\x12\x04S\0U\x01\x1aC*\n\x20Represents\x20an\x20invoice\x20t\
    hat\x20will\x20be\x20paid\x20by\x20your\x20lightning\x20node.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03S\x08\x19\n!\n\x04\x04\x02\x02\0\x12\x03T\x08\
    \x1b\"\x14\x20The\x20invoice\x20to\x20pay\n\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03T\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03T\x0f\x16\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03T\x19\x1a\nC\n\x02\x04\x03\x12\x04Z\
    \0\\\x01\x1a7*\n\x20Represents\x20a\x20response\x20back\x20from\x20the\
    \x20payment\x20result.\n\n\n\n\x03\x04\x03\x01\x12\x03Z\x08\x1a\nB\n\x04\
    \x04\x03\x02\0\x12\x03[\x08\x1c\"5\x20The\x20preimage\x20from\x20the\x20\
    payment\x20result,\x20if\x20successful\n\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03[\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03[\x0f\x17\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03[\x1a\x1b\n:\n\x02\x04\x04\x12\x04a\0c\x01\
    \x1a.*\n\x20Represents\x20an\x20request\x20to\x20check\x20an\x20invoice.\
    \n\n\n\n\x03\x04\x04\x01\x12\x03a\x08\x1b\n#\n\x04\x04\x04\x02\0\x12\x03\
    b\x08\x1b\"\x16\x20The\x20invoice\x20to\x20check\n\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03b\x08\x0e\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03b\x0f\
    \x16\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03b\x19\x1a\nB\n\x02\x04\x05\x12\
    \x04h\0j\x01\x1a6*\n\x20Represents\x20a\x20response\x20back\x20from\x20t\
    he\x20invoice\x20check.\n\n\n\n\x03\x04\x05\x01\x12\x03h\x08\x1c\nR\n\
    \x04\x04\x05\x02\0\x12\x03i\x08\x16\"E\x20The\x20boolean\x20result\x20re\
    presenting\x20whether\x20or\x20not\x20the\x20invoice\x20was\x20paid\n\n\
    \x0c\n\x05\x04\x05\x02\0\x05\x12\x03i\x08\x0c\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03i\r\x11\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03i\x14\x15b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
