// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/imp/api/vpn/vpn.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct RequestQuoteRequest {
    // message fields
    pub pubkey: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestQuoteRequest {
    fn default() -> &'a RequestQuoteRequest {
        <RequestQuoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl RequestQuoteRequest {
    pub fn new() -> RequestQuoteRequest {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestQuoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestQuoteRequest {
        RequestQuoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &RequestQuoteRequest| { &m.pubkey },
                |m: &mut RequestQuoteRequest| { &mut m.pubkey },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestQuoteRequest>(
                "RequestQuoteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestQuoteRequest {
        static instance: ::protobuf::rt::LazyV2<RequestQuoteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestQuoteRequest::new)
    }
}

impl ::protobuf::Clear for RequestQuoteRequest {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestQuoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestQuoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestQuoteResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestQuoteResponse {
    fn default() -> &'a RequestQuoteResponse {
        <RequestQuoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl RequestQuoteResponse {
    pub fn new() -> RequestQuoteResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestQuoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestQuoteResponse {
        RequestQuoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &RequestQuoteResponse| { &m.id },
                |m: &mut RequestQuoteResponse| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestQuoteResponse>(
                "RequestQuoteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestQuoteResponse {
        static instance: ::protobuf::rt::LazyV2<RequestQuoteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestQuoteResponse::new)
    }
}

impl ::protobuf::Clear for RequestQuoteResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestQuoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestQuoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AcceptContractRequest {
    // message fields
    pub pubkey: ::std::string::String,
    pub nonce: ::std::string::String,
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AcceptContractRequest {
    fn default() -> &'a AcceptContractRequest {
        <AcceptContractRequest as ::protobuf::Message>::default_instance()
    }
}

impl AcceptContractRequest {
    pub fn new() -> AcceptContractRequest {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }

    // string nonce = 2;


    pub fn get_nonce(&self) -> &str {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    // string price = 3;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AcceptContractRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nonce)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nonce);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        if !self.nonce.is_empty() {
            os.write_string(2, &self.nonce)?;
        }
        if !self.price.is_empty() {
            os.write_string(3, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AcceptContractRequest {
        AcceptContractRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &AcceptContractRequest| { &m.pubkey },
                |m: &mut AcceptContractRequest| { &mut m.pubkey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nonce",
                |m: &AcceptContractRequest| { &m.nonce },
                |m: &mut AcceptContractRequest| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "price",
                |m: &AcceptContractRequest| { &m.price },
                |m: &mut AcceptContractRequest| { &mut m.price },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AcceptContractRequest>(
                "AcceptContractRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AcceptContractRequest {
        static instance: ::protobuf::rt::LazyV2<AcceptContractRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AcceptContractRequest::new)
    }
}

impl ::protobuf::Clear for AcceptContractRequest {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.nonce.clear();
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AcceptContractRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AcceptContractRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AcceptContractResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AcceptContractResponse {
    fn default() -> &'a AcceptContractResponse {
        <AcceptContractResponse as ::protobuf::Message>::default_instance()
    }
}

impl AcceptContractResponse {
    pub fn new() -> AcceptContractResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AcceptContractResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AcceptContractResponse {
        AcceptContractResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &AcceptContractResponse| { &m.id },
                |m: &mut AcceptContractResponse| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AcceptContractResponse>(
                "AcceptContractResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AcceptContractResponse {
        static instance: ::protobuf::rt::LazyV2<AcceptContractResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AcceptContractResponse::new)
    }
}

impl ::protobuf::Clear for AcceptContractResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AcceptContractResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AcceptContractResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RefreshContractRequest {
    // message fields
    pub pubkey: ::std::string::String,
    pub nonce: ::std::string::String,
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RefreshContractRequest {
    fn default() -> &'a RefreshContractRequest {
        <RefreshContractRequest as ::protobuf::Message>::default_instance()
    }
}

impl RefreshContractRequest {
    pub fn new() -> RefreshContractRequest {
        ::std::default::Default::default()
    }

    // string pubkey = 1;


    pub fn get_pubkey(&self) -> &str {
        &self.pubkey
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::std::string::String) {
        self.pubkey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::std::string::String {
        &mut self.pubkey
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubkey, ::std::string::String::new())
    }

    // string nonce = 2;


    pub fn get_nonce(&self) -> &str {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    // string price = 3;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RefreshContractRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubkey)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nonce)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubkey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubkey);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nonce);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubkey.is_empty() {
            os.write_string(1, &self.pubkey)?;
        }
        if !self.nonce.is_empty() {
            os.write_string(2, &self.nonce)?;
        }
        if !self.price.is_empty() {
            os.write_string(3, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RefreshContractRequest {
        RefreshContractRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubkey",
                |m: &RefreshContractRequest| { &m.pubkey },
                |m: &mut RefreshContractRequest| { &mut m.pubkey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nonce",
                |m: &RefreshContractRequest| { &m.nonce },
                |m: &mut RefreshContractRequest| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "price",
                |m: &RefreshContractRequest| { &m.price },
                |m: &mut RefreshContractRequest| { &mut m.price },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RefreshContractRequest>(
                "RefreshContractRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RefreshContractRequest {
        static instance: ::protobuf::rt::LazyV2<RefreshContractRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RefreshContractRequest::new)
    }
}

impl ::protobuf::Clear for RefreshContractRequest {
    fn clear(&mut self) {
        self.pubkey.clear();
        self.nonce.clear();
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RefreshContractRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RefreshContractRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RefreshContractResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RefreshContractResponse {
    fn default() -> &'a RefreshContractResponse {
        <RefreshContractResponse as ::protobuf::Message>::default_instance()
    }
}

impl RefreshContractResponse {
    pub fn new() -> RefreshContractResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RefreshContractResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RefreshContractResponse {
        RefreshContractResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &RefreshContractResponse| { &m.id },
                |m: &mut RefreshContractResponse| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RefreshContractResponse>(
                "RefreshContractResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RefreshContractResponse {
        static instance: ::protobuf::rt::LazyV2<RefreshContractResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RefreshContractResponse::new)
    }
}

impl ::protobuf::Clear for RefreshContractResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RefreshContractResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RefreshContractResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bproto/imp/api/vpn/vpn.proto\x12\x03vpn\x1a\x1cgoogle/api/annotatio\
    ns.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"-\n\x13Requ\
    estQuoteRequest\x12\x16\n\x06pubkey\x18\x01\x20\x01(\tR\x06pubkey\"&\n\
    \x14RequestQuoteResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"[\n\
    \x15AcceptContractRequest\x12\x16\n\x06pubkey\x18\x01\x20\x01(\tR\x06pub\
    key\x12\x14\n\x05nonce\x18\x02\x20\x01(\tR\x05nonce\x12\x14\n\x05price\
    \x18\x03\x20\x01(\tR\x05price\"(\n\x16AcceptContractResponse\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\"\\\n\x16RefreshContractRequest\x12\x16\
    \n\x06pubkey\x18\x01\x20\x01(\tR\x06pubkey\x12\x14\n\x05nonce\x18\x02\
    \x20\x01(\tR\x05nonce\x12\x14\n\x05price\x18\x03\x20\x01(\tR\x05price\")\
    \n\x17RefreshContractResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id2\
    \xb6\x02\n\x03VPN\x12]\n\x0cRequestQuote\x12\x18.vpn.RequestQuoteRequest\
    \x1a\x19.vpn.RequestQuoteResponse\"\x18\x82\xd3\xe4\x93\x02\x12\"\r/v1/v\
    pn/quote:\x01*\x12f\n\x0eAcceptContract\x12\x1a.vpn.AcceptContractReques\
    t\x1a\x1b.vpn.AcceptContractResponse\"\x1b\x82\xd3\xe4\x93\x02\x15\"\x10\
    /v1/vpn/contract:\x01*\x12h\n\x0fRefreshContract\x12\x1b.vpn.RefreshCont\
    ractRequest\x1a\x1c.vpn.RefreshContractResponse\"\x1a\x82\xd3\xe4\x93\
    \x02\x14\"\x0f/v1/vpn/refresh:\x01*B\xc3\x01Z#github.com/imperviousai/fr\
    eeimp/gen\x92A\x9a\x01\x12;\n\x0cVPN\x20Services\"&\n\rImpervious\x20AI\
    \x12\x15https://impervious.ai2\x031.0*\x03\x01\x02\x042\x10application/j\
    son:\x10application/jsonr2\n\x14Documentation\x20on\x20IMP\x12\x1ahttps:\
    //docs.impervious.aiJ\xc4\x11\n\x06\x12\x04\x01\0m\x01\nK\n\x01\x0c\x12\
    \x03\x01\0\x12\x1aA/\x20Allows\x20for\x20an\x20Encrypted\x20Wireguard\
    \x20VPN\x20between\x20Impervious\x20nodes\n\n\x08\n\x01\x02\x12\x03\x03\
    \0\x0c\n\x08\n\x01\x08\x12\x03\x05\0:\n\t\n\x02\x08\x0b\x12\x03\x05\0:\n\
    \t\n\x02\x03\0\x12\x03\x07\0&\n\t\n\x02\x03\x01\x12\x03\x08\08\n\t\n\x01\
    \x08\x12\x04\n\0\x1c\x02\n\x0b\n\x03\x08\x92\x08\x12\x04\n\0\x1c\x02\n[\
    \n\x02\x06\0\x12\x04!\0?\x01\x1aO*\n\x20VPN\x20service\x20allows\x20for\
    \x20an\x20Encrypted\x20Wireguard\x20VPN\x20between\x20Impervious\x20node\
    s.\n\n\n\n\x03\x06\0\x01\x12\x03!\x08\x0b\nB\n\x04\x06\0\x02\0\x12\x04%\
    \x08*\t\x1a4*\n\x20RequestQuote\x20requests\x20a\x20quote\x20from\x20ano\
    ther\x20node.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03%\x0c\x18\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03%\x19,\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03%7K\n\
    \r\n\x05\x06\0\x02\0\x04\x12\x04&\x10)\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\
    \xca\xbc\"\x12\x04&\x10)\x12\nJ\n\x04\x06\0\x02\x01\x12\x04/\x084\t\x1a<\
    *\n\x20AcceptContract\x20accepts\x20and\x20pays\x20for\x20a\x20specific\
    \x20contract.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03/\x0c\x1a\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x03/\x1b0\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x03/;Q\n\r\n\x05\x06\0\x02\x01\x04\x12\x040\x103\x12\n\x11\n\t\x06\0\
    \x02\x01\x04\xb0\xca\xbc\"\x12\x040\x103\x12\nf\n\x04\x06\0\x02\x02\x12\
    \x049\x08>\t\x1aX*\n\x20RefreshContract\x20accepts\x20and\x20pays\x20for\
    \x20a\x20specific\x20contract\x20refresh\x20on\x20an\x20existing\x20VPN.\
    \n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x039\x0c\x1b\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x039\x1c2\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x039=T\n\r\n\
    \x05\x06\0\x02\x02\x04\x12\x04:\x10=\x12\n\x11\n\t\x06\0\x02\x02\x04\xb0\
    \xca\xbc\"\x12\x04:\x10=\x12\nO\n\x02\x04\0\x12\x04D\0F\x01\x1aC*\n\x20R\
    epresents\x20a\x20request\x20to\x20receive\x20a\x20VPN\x20quote\x20from\
    \x20a\x20far\x20end\x20node\n\n\n\n\x03\x04\0\x01\x12\x03D\x08\x1b\nA\n\
    \x04\x04\0\x02\0\x12\x03E\x04\x16\"4\x20The\x20public\x20key\x20of\x20th\
    e\x20far\x20end\x20LND\x20node\x20running\x20IMP\n\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03E\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03E\x0b\x11\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03E\x14\x15\nC\n\x02\x04\x01\x12\x04K\0M\x01\
    \x1a7*\n\x20Represents\x20a\x20response\x20back\x20from\x20a\x20VPN\x20Q\
    uote\x20Reqeust\n\n\n\n\x03\x04\x01\x01\x12\x03K\x08\x1c\n\"\n\x04\x04\
    \x01\x02\0\x12\x03L\x08\x16\"\x15\x20returned\x20message\x20ID\n\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03L\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03L\x0f\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03L\x14\x15\nD\n\
    \x02\x04\x02\x12\x04R\0V\x01\x1a8*\n\x20Represents\x20a\x20request\x20to\
    \x20Accept\x20(Pay\x20For)\x20a\x20VPN\x20Quote\n\n\n\n\x03\x04\x02\x01\
    \x12\x03R\x08\x1d\nA\n\x04\x04\x02\x02\0\x12\x03S\x04\x16\"4\x20The\x20p\
    ublic\x20key\x20of\x20the\x20far\x20end\x20LND\x20node\x20running\x20IMP\
    \n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03S\x04\n\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03S\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03S\x14\x15\n\
    8\n\x04\x04\x02\x02\x01\x12\x03T\x04\x15\"+\x20the\x20identifier\x20from\
    \x20a\x20requested\x20VPN\x20quote\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03T\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03T\x0b\x10\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03T\x13\x14\n7\n\x04\x04\x02\x02\x02\x12\x03U\
    \x04\x15\"*\x20the\x20agreed\x20upon\x20price\x20from\x20the\x20VPN\x20q\
    uote\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03U\x04\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03U\x0b\x10\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03U\x13\x14\nE\n\x02\x04\x03\x12\x04[\0]\x01\x1a9*\n\x20Represents\x20\
    a\x20response\x20back\x20from\x20an\x20accepted\x20VPN\x20Quote\n\n\n\n\
    \x03\x04\x03\x01\x12\x03[\x08\x1e\n\"\n\x04\x04\x03\x02\0\x12\x03\\\x08\
    \x16\"\x15\x20returned\x20message\x20ID\n\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03\\\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\\\x0f\x11\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03\\\x14\x15\nk\n\x02\x04\x04\x12\x04b\0f\
    \x01\x1a_*\n\x20Represents\x20a\x20request\x20to\x20extend/refresh\x20an\
    \x20expiring\x20VPN\x20Connection\x20(i.e.\x20purchase\x20more\x20time)\
    \n\n\n\n\x03\x04\x04\x01\x12\x03b\x08\x1e\nA\n\x04\x04\x04\x02\0\x12\x03\
    c\x04\x16\"4\x20The\x20public\x20key\x20of\x20the\x20far\x20end\x20LND\
    \x20node\x20running\x20IMP\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03c\x04\
    \n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03c\x0b\x11\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03c\x14\x15\n3\n\x04\x04\x04\x02\x01\x12\x03d\x04\x15\"&\
    \x20the\x20identifier\x20of\x20the\x20VPN\x20connection\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x05\x12\x03d\x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\
    \x03d\x0b\x10\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03d\x13\x14\n7\n\x04\
    \x04\x04\x02\x02\x12\x03e\x04\x15\"*\x20the\x20agreed\x20upon\x20price\
    \x20from\x20the\x20VPN\x20quote\n\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\
    \x03e\x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03e\x0b\x10\n\x0c\n\x05\
    \x04\x04\x02\x02\x03\x12\x03e\x13\x14\nI\n\x02\x04\x05\x12\x04k\0m\x01\
    \x1a=*\n\x20Represents\x20a\x20reponse\x20back\x20from\x20a\x20refreshed\
    \x20VPN\x20connection\n\n\n\n\x03\x04\x05\x01\x12\x03k\x08\x1f\n\"\n\x04\
    \x04\x05\x02\0\x12\x03l\x08\x16\"\x15\x20returned\x20message\x20ID\n\n\
    \x0c\n\x05\x04\x05\x02\0\x05\x12\x03l\x08\x0e\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03l\x0f\x11\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03l\x14\x15b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
