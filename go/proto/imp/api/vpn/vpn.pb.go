/// Allows for an Encrypted Wireguard VPN between Impervious nodes

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/imp/api/vpn/vpn.proto

package gen

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Represents a request to receive a VPN quote from a far end node
type RequestQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"` // The public key of the far end LND node running IMP
}

func (x *RequestQuoteRequest) Reset() {
	*x = RequestQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuoteRequest) ProtoMessage() {}

func (x *RequestQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuoteRequest.ProtoReflect.Descriptor instead.
func (*RequestQuoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_vpn_vpn_proto_rawDescGZIP(), []int{0}
}

func (x *RequestQuoteRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

//*
// Represents a response back from a VPN Quote Reqeust
type RequestQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // returned message ID
}

func (x *RequestQuoteResponse) Reset() {
	*x = RequestQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuoteResponse) ProtoMessage() {}

func (x *RequestQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuoteResponse.ProtoReflect.Descriptor instead.
func (*RequestQuoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_vpn_vpn_proto_rawDescGZIP(), []int{1}
}

func (x *RequestQuoteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// Represents a request to Accept (Pay For) a VPN Quote
type AcceptContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"` // The public key of the far end LND node running IMP
	Nonce  string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`   // the identifier from a requested VPN quote
	Price  string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`   // the agreed upon price from the VPN quote
}

func (x *AcceptContractRequest) Reset() {
	*x = AcceptContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptContractRequest) ProtoMessage() {}

func (x *AcceptContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptContractRequest.ProtoReflect.Descriptor instead.
func (*AcceptContractRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_vpn_vpn_proto_rawDescGZIP(), []int{2}
}

func (x *AcceptContractRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AcceptContractRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *AcceptContractRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

//*
// Represents a response back from an accepted VPN Quote
type AcceptContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // returned message ID
}

func (x *AcceptContractResponse) Reset() {
	*x = AcceptContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptContractResponse) ProtoMessage() {}

func (x *AcceptContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptContractResponse.ProtoReflect.Descriptor instead.
func (*AcceptContractResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_vpn_vpn_proto_rawDescGZIP(), []int{3}
}

func (x *AcceptContractResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// Represents a request to extend/refresh an expiring VPN Connection (i.e. purchase more time)
type RefreshContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"` // The public key of the far end LND node running IMP
	Nonce  string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`   // the identifier of the VPN connection
	Price  string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`   // the agreed upon price from the VPN quote
}

func (x *RefreshContractRequest) Reset() {
	*x = RefreshContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshContractRequest) ProtoMessage() {}

func (x *RefreshContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshContractRequest.ProtoReflect.Descriptor instead.
func (*RefreshContractRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_vpn_vpn_proto_rawDescGZIP(), []int{4}
}

func (x *RefreshContractRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *RefreshContractRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *RefreshContractRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

//*
// Represents a reponse back from a refreshed VPN connection
type RefreshContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // returned message ID
}

func (x *RefreshContractResponse) Reset() {
	*x = RefreshContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshContractResponse) ProtoMessage() {}

func (x *RefreshContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_vpn_vpn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshContractResponse.ProtoReflect.Descriptor instead.
func (*RefreshContractResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_vpn_vpn_proto_rawDescGZIP(), []int{5}
}

func (x *RefreshContractResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_proto_imp_api_vpn_vpn_proto protoreflect.FileDescriptor

var file_proto_imp_api_vpn_vpn_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6d, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x70, 0x6e, 0x2f, 0x76, 0x70, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x76,
	0x70, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22,
	0x26, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c,
	0x0a, 0x16, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x17,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xb6, 0x02, 0x0a, 0x03, 0x56, 0x50, 0x4e, 0x12,
	0x5d, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12,
	0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x70, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x70, 0x6e, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x66,
	0x0a, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1a, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76,
	0x70, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x70, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x76, 0x70, 0x6e, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x70, 0x6e, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x3a, 0x01, 0x2a,
	0x42, 0xd5, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x61, 0x69, 0x2f, 0x66, 0x72, 0x65,
	0x65, 0x69, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x92, 0x41, 0xac, 0x01, 0x12, 0x3b, 0x0a, 0x0c,
	0x56, 0x50, 0x4e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0d,
	0x49, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x41, 0x49, 0x12, 0x15, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x2e, 0x61, 0x69, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x03, 0x01, 0x02, 0x04, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x72, 0x44, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x4d, 0x50, 0x12, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x61, 0x69, 0x2f, 0x69, 0x6d, 0x70, 0x2d,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_imp_api_vpn_vpn_proto_rawDescOnce sync.Once
	file_proto_imp_api_vpn_vpn_proto_rawDescData = file_proto_imp_api_vpn_vpn_proto_rawDesc
)

func file_proto_imp_api_vpn_vpn_proto_rawDescGZIP() []byte {
	file_proto_imp_api_vpn_vpn_proto_rawDescOnce.Do(func() {
		file_proto_imp_api_vpn_vpn_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_imp_api_vpn_vpn_proto_rawDescData)
	})
	return file_proto_imp_api_vpn_vpn_proto_rawDescData
}

var file_proto_imp_api_vpn_vpn_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_imp_api_vpn_vpn_proto_goTypes = []interface{}{
	(*RequestQuoteRequest)(nil),     // 0: vpn.RequestQuoteRequest
	(*RequestQuoteResponse)(nil),    // 1: vpn.RequestQuoteResponse
	(*AcceptContractRequest)(nil),   // 2: vpn.AcceptContractRequest
	(*AcceptContractResponse)(nil),  // 3: vpn.AcceptContractResponse
	(*RefreshContractRequest)(nil),  // 4: vpn.RefreshContractRequest
	(*RefreshContractResponse)(nil), // 5: vpn.RefreshContractResponse
}
var file_proto_imp_api_vpn_vpn_proto_depIdxs = []int32{
	0, // 0: vpn.VPN.RequestQuote:input_type -> vpn.RequestQuoteRequest
	2, // 1: vpn.VPN.AcceptContract:input_type -> vpn.AcceptContractRequest
	4, // 2: vpn.VPN.RefreshContract:input_type -> vpn.RefreshContractRequest
	1, // 3: vpn.VPN.RequestQuote:output_type -> vpn.RequestQuoteResponse
	3, // 4: vpn.VPN.AcceptContract:output_type -> vpn.AcceptContractResponse
	5, // 5: vpn.VPN.RefreshContract:output_type -> vpn.RefreshContractResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_imp_api_vpn_vpn_proto_init() }
func file_proto_imp_api_vpn_vpn_proto_init() {
	if File_proto_imp_api_vpn_vpn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_imp_api_vpn_vpn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_vpn_vpn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_vpn_vpn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_vpn_vpn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_vpn_vpn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_vpn_vpn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_imp_api_vpn_vpn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_imp_api_vpn_vpn_proto_goTypes,
		DependencyIndexes: file_proto_imp_api_vpn_vpn_proto_depIdxs,
		MessageInfos:      file_proto_imp_api_vpn_vpn_proto_msgTypes,
	}.Build()
	File_proto_imp_api_vpn_vpn_proto = out.File
	file_proto_imp_api_vpn_vpn_proto_rawDesc = nil
	file_proto_imp_api_vpn_vpn_proto_goTypes = nil
	file_proto_imp_api_vpn_vpn_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VPNClient is the client API for VPN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VPNClient interface {
	RequestQuote(ctx context.Context, in *RequestQuoteRequest, opts ...grpc.CallOption) (*RequestQuoteResponse, error)
	AcceptContract(ctx context.Context, in *AcceptContractRequest, opts ...grpc.CallOption) (*AcceptContractResponse, error)
	RefreshContract(ctx context.Context, in *RefreshContractRequest, opts ...grpc.CallOption) (*RefreshContractResponse, error)
}

type vPNClient struct {
	cc grpc.ClientConnInterface
}

func NewVPNClient(cc grpc.ClientConnInterface) VPNClient {
	return &vPNClient{cc}
}

func (c *vPNClient) RequestQuote(ctx context.Context, in *RequestQuoteRequest, opts ...grpc.CallOption) (*RequestQuoteResponse, error) {
	out := new(RequestQuoteResponse)
	err := c.cc.Invoke(ctx, "/vpn.VPN/RequestQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNClient) AcceptContract(ctx context.Context, in *AcceptContractRequest, opts ...grpc.CallOption) (*AcceptContractResponse, error) {
	out := new(AcceptContractResponse)
	err := c.cc.Invoke(ctx, "/vpn.VPN/AcceptContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPNClient) RefreshContract(ctx context.Context, in *RefreshContractRequest, opts ...grpc.CallOption) (*RefreshContractResponse, error) {
	out := new(RefreshContractResponse)
	err := c.cc.Invoke(ctx, "/vpn.VPN/RefreshContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VPNServer is the server API for VPN service.
type VPNServer interface {
	RequestQuote(context.Context, *RequestQuoteRequest) (*RequestQuoteResponse, error)
	AcceptContract(context.Context, *AcceptContractRequest) (*AcceptContractResponse, error)
	RefreshContract(context.Context, *RefreshContractRequest) (*RefreshContractResponse, error)
}

// UnimplementedVPNServer can be embedded to have forward compatible implementations.
type UnimplementedVPNServer struct {
}

func (*UnimplementedVPNServer) RequestQuote(context.Context, *RequestQuoteRequest) (*RequestQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestQuote not implemented")
}
func (*UnimplementedVPNServer) AcceptContract(context.Context, *AcceptContractRequest) (*AcceptContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptContract not implemented")
}
func (*UnimplementedVPNServer) RefreshContract(context.Context, *RefreshContractRequest) (*RefreshContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshContract not implemented")
}

func RegisterVPNServer(s *grpc.Server, srv VPNServer) {
	s.RegisterService(&_VPN_serviceDesc, srv)
}

func _VPN_RequestQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServer).RequestQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpn.VPN/RequestQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServer).RequestQuote(ctx, req.(*RequestQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPN_AcceptContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServer).AcceptContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpn.VPN/AcceptContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServer).AcceptContract(ctx, req.(*AcceptContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPN_RefreshContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPNServer).RefreshContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpn.VPN/RefreshContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPNServer).RefreshContract(ctx, req.(*RefreshContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VPN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpn.VPN",
	HandlerType: (*VPNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestQuote",
			Handler:    _VPN_RequestQuote_Handler,
		},
		{
			MethodName: "AcceptContract",
			Handler:    _VPN_AcceptContract_Handler,
		},
		{
			MethodName: "RefreshContract",
			Handler:    _VPN_RefreshContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imp/api/vpn/vpn.proto",
}
