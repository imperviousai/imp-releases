/// Allows for p2p sockets to be established between Impervious nodes

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/imp/api/socket/socket.proto

package gen

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Represents a request to send socket connection information to a far end node
type SendSocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"` // The public key of the far end LND node running IMP
}

func (x *SendSocketRequest) Reset() {
	*x = SendSocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_socket_socket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSocketRequest) ProtoMessage() {}

func (x *SendSocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_socket_socket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSocketRequest.ProtoReflect.Descriptor instead.
func (*SendSocketRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_socket_socket_proto_rawDescGZIP(), []int{0}
}

func (x *SendSocketRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

//*
// Represents a response back from the request to establish a socket
type SendSocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // returned message ID
}

func (x *SendSocketResponse) Reset() {
	*x = SendSocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_socket_socket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSocketResponse) ProtoMessage() {}

func (x *SendSocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_socket_socket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSocketResponse.ProtoReflect.Descriptor instead.
func (*SendSocketResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_socket_socket_proto_rawDescGZIP(), []int{1}
}

func (x *SendSocketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//*
// Represents a request to start a socket on an owned IMP node
type StartSocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartSocketRequest) Reset() {
	*x = StartSocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_socket_socket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSocketRequest) ProtoMessage() {}

func (x *StartSocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_socket_socket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSocketRequest.ProtoReflect.Descriptor instead.
func (*StartSocketRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_socket_socket_proto_rawDescGZIP(), []int{2}
}

//*
// Represents a response containing socket information from a started socket
type StartSocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"` // the protocol of the socket connection
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`             // the ip of the IMP node to connect to
	Port1    string `protobuf:"bytes,3,opt,name=port1,proto3" json:"port1,omitempty"`       // the first port of the socket connection
	Port2    string `protobuf:"bytes,4,opt,name=port2,proto3" json:"port2,omitempty"`       // the second port of the socket connection
}

func (x *StartSocketResponse) Reset() {
	*x = StartSocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_socket_socket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSocketResponse) ProtoMessage() {}

func (x *StartSocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_socket_socket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSocketResponse.ProtoReflect.Descriptor instead.
func (*StartSocketResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_socket_socket_proto_rawDescGZIP(), []int{3}
}

func (x *StartSocketResponse) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *StartSocketResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *StartSocketResponse) GetPort1() string {
	if x != nil {
		return x.Port1
	}
	return ""
}

func (x *StartSocketResponse) GetPort2() string {
	if x != nil {
		return x.Port2
	}
	return ""
}

//*
// Represents a request to stop a socket on an owned IMP node
type StopSocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSocketRequest) Reset() {
	*x = StopSocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_socket_socket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSocketRequest) ProtoMessage() {}

func (x *StopSocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_socket_socket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSocketRequest.ProtoReflect.Descriptor instead.
func (*StopSocketRequest) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_socket_socket_proto_rawDescGZIP(), []int{4}
}

//*
// Represents a response back from a stopped socket
type StopSocketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSocketResponse) Reset() {
	*x = StopSocketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_imp_api_socket_socket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSocketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSocketResponse) ProtoMessage() {}

func (x *StopSocketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_imp_api_socket_socket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSocketResponse.ProtoReflect.Descriptor instead.
func (*StopSocketResponse) Descriptor() ([]byte, []int) {
	return file_proto_imp_api_socket_socket_proto_rawDescGZIP(), []int{5}
}

var File_proto_imp_api_socket_socket_proto protoreflect.FileDescriptor

var file_proto_imp_api_socket_socket_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6d, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x65, 0x6e,
	0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x6d, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x32, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb6, 0x02, 0x0a,
	0x06, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x2f, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x63, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a,
	0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x42, 0xc6, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x61,
	0x69, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x69, 0x6d, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x92, 0x41, 0x9d,
	0x01, 0x12, 0x3e, 0x0a, 0x0f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x20, 0x41, 0x49, 0x12, 0x15, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x69,
	0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x2e, 0x61, 0x69, 0x32, 0x03, 0x31, 0x2e,
	0x30, 0x2a, 0x03, 0x01, 0x02, 0x04, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x32, 0x0a, 0x14, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x49,
	0x4d, 0x50, 0x12, 0x1a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2e, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x2e, 0x61, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_imp_api_socket_socket_proto_rawDescOnce sync.Once
	file_proto_imp_api_socket_socket_proto_rawDescData = file_proto_imp_api_socket_socket_proto_rawDesc
)

func file_proto_imp_api_socket_socket_proto_rawDescGZIP() []byte {
	file_proto_imp_api_socket_socket_proto_rawDescOnce.Do(func() {
		file_proto_imp_api_socket_socket_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_imp_api_socket_socket_proto_rawDescData)
	})
	return file_proto_imp_api_socket_socket_proto_rawDescData
}

var file_proto_imp_api_socket_socket_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_imp_api_socket_socket_proto_goTypes = []interface{}{
	(*SendSocketRequest)(nil),   // 0: socket.SendSocketRequest
	(*SendSocketResponse)(nil),  // 1: socket.SendSocketResponse
	(*StartSocketRequest)(nil),  // 2: socket.StartSocketRequest
	(*StartSocketResponse)(nil), // 3: socket.StartSocketResponse
	(*StopSocketRequest)(nil),   // 4: socket.StopSocketRequest
	(*StopSocketResponse)(nil),  // 5: socket.StopSocketResponse
}
var file_proto_imp_api_socket_socket_proto_depIdxs = []int32{
	0, // 0: socket.Socket.SendSocket:input_type -> socket.SendSocketRequest
	2, // 1: socket.Socket.StartSocket:input_type -> socket.StartSocketRequest
	4, // 2: socket.Socket.StopSocket:input_type -> socket.StopSocketRequest
	1, // 3: socket.Socket.SendSocket:output_type -> socket.SendSocketResponse
	3, // 4: socket.Socket.StartSocket:output_type -> socket.StartSocketResponse
	5, // 5: socket.Socket.StopSocket:output_type -> socket.StopSocketResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_imp_api_socket_socket_proto_init() }
func file_proto_imp_api_socket_socket_proto_init() {
	if File_proto_imp_api_socket_socket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_imp_api_socket_socket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_socket_socket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_socket_socket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_socket_socket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_socket_socket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_imp_api_socket_socket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSocketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_imp_api_socket_socket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_imp_api_socket_socket_proto_goTypes,
		DependencyIndexes: file_proto_imp_api_socket_socket_proto_depIdxs,
		MessageInfos:      file_proto_imp_api_socket_socket_proto_msgTypes,
	}.Build()
	File_proto_imp_api_socket_socket_proto = out.File
	file_proto_imp_api_socket_socket_proto_rawDesc = nil
	file_proto_imp_api_socket_socket_proto_goTypes = nil
	file_proto_imp_api_socket_socket_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SocketClient is the client API for Socket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SocketClient interface {
	//*
	// SendSocket sends a socket request to another node.
	SendSocket(ctx context.Context, in *SendSocketRequest, opts ...grpc.CallOption) (*SendSocketResponse, error)
	//*
	// StartSocket starts the socket on your Impervious node.
	StartSocket(ctx context.Context, in *StartSocketRequest, opts ...grpc.CallOption) (*StartSocketResponse, error)
	//*
	// StopSocket stops the socket on your Impervious node.
	StopSocket(ctx context.Context, in *StopSocketRequest, opts ...grpc.CallOption) (*StopSocketResponse, error)
}

type socketClient struct {
	cc grpc.ClientConnInterface
}

func NewSocketClient(cc grpc.ClientConnInterface) SocketClient {
	return &socketClient{cc}
}

func (c *socketClient) SendSocket(ctx context.Context, in *SendSocketRequest, opts ...grpc.CallOption) (*SendSocketResponse, error) {
	out := new(SendSocketResponse)
	err := c.cc.Invoke(ctx, "/socket.Socket/SendSocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) StartSocket(ctx context.Context, in *StartSocketRequest, opts ...grpc.CallOption) (*StartSocketResponse, error) {
	out := new(StartSocketResponse)
	err := c.cc.Invoke(ctx, "/socket.Socket/StartSocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socketClient) StopSocket(ctx context.Context, in *StopSocketRequest, opts ...grpc.CallOption) (*StopSocketResponse, error) {
	out := new(StopSocketResponse)
	err := c.cc.Invoke(ctx, "/socket.Socket/StopSocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocketServer is the server API for Socket service.
type SocketServer interface {
	//*
	// SendSocket sends a socket request to another node.
	SendSocket(context.Context, *SendSocketRequest) (*SendSocketResponse, error)
	//*
	// StartSocket starts the socket on your Impervious node.
	StartSocket(context.Context, *StartSocketRequest) (*StartSocketResponse, error)
	//*
	// StopSocket stops the socket on your Impervious node.
	StopSocket(context.Context, *StopSocketRequest) (*StopSocketResponse, error)
}

// UnimplementedSocketServer can be embedded to have forward compatible implementations.
type UnimplementedSocketServer struct {
}

func (*UnimplementedSocketServer) SendSocket(context.Context, *SendSocketRequest) (*SendSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSocket not implemented")
}
func (*UnimplementedSocketServer) StartSocket(context.Context, *StartSocketRequest) (*StartSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSocket not implemented")
}
func (*UnimplementedSocketServer) StopSocket(context.Context, *StopSocketRequest) (*StopSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSocket not implemented")
}

func RegisterSocketServer(s *grpc.Server, srv SocketServer) {
	s.RegisterService(&_Socket_serviceDesc, srv)
}

func _Socket_SendSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).SendSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socket.Socket/SendSocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).SendSocket(ctx, req.(*SendSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_StartSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).StartSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socket.Socket/StartSocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).StartSocket(ctx, req.(*StartSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Socket_StopSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocketServer).StopSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socket.Socket/StopSocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocketServer).StopSocket(ctx, req.(*StopSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Socket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "socket.Socket",
	HandlerType: (*SocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSocket",
			Handler:    _Socket_SendSocket_Handler,
		},
		{
			MethodName: "StartSocket",
			Handler:    _Socket_StartSocket_Handler,
		},
		{
			MethodName: "StopSocket",
			Handler:    _Socket_StopSocket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/imp/api/socket/socket.proto",
}
